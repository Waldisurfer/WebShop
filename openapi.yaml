openapi: "3.0.3"
info:
  version: "1.0.0"
  title: "Auction"
  description: >-
tags:
  - name: Users
  - name: Products
  - name: Utilities
servers:
  - url: http://localhost:8080/api
    description: Default Server
paths:
  /login:
    get:
      summary: Getting Login Session
      tags:
        - Users
      responses:
        200:
          $ref: '#/components/responses/Token'
    post:
      summary: Login Callback
      tags:
        - Users
      responses:
        200:
          $ref: '#/components/responses/Token'
  /users:
    get:
      summary: List users
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
      tags:
        - Users
      responses:
        200:
          $ref: '#/components/responses/Users'
    post:
      summary: Register User
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/UserCreate'
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    summary: User
    get:
      summary: Get User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Users
      responses:
        200:
          $ref: "#/components/responses/User"
    patch:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Users
      summary: Update User
      responses:
        200:
          $ref: "#/components/responses/User"
    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Users
      summary: Delete User
      responses:
        204:
          $ref: "#/components/responses/NoContent"
  /categories:
    get:
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
      tags:
        - Products
      responses:
        200:
          $ref: "#/components/responses/Categories"
    post:
      tags:
        - Products
      requestBody:
        $ref: "#/components/requestBodies/CategoryCreate"
      responses:
        201:
          $ref: "#/components/responses/Category"
  /categories/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Products
      responses:
        200:
          $ref: "#/components/responses/Categories"
    patch:
      tags:
        - Products
      responses:
        200:
          $ref: "#/components/responses/Category"
    delete:
      tags:
        - Products
      responses:
        204:
          $ref: "#/components/responses/NoContent"
  /categories/{id}/children:
    get:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
      responses:
        200:
          $ref: "#/components/responses/Categories"
  /categories/{id}/products:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
      tags:
        - Products
      responses:
        200:
          $ref: "#/components/responses/Product"
  /products:
    get:
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
      responses:
        200:
          $ref: "#/components/responses/Products"
    post:
      tags:
        - Products
      responses:
        201:
          $ref: "#/components/responses/Product"
  /products/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Products
      responses:
        200:
          $ref: "#/components/responses/Product"
    patch:
      tags:
        - Products
      responses:
        200:
          $ref: "#/components/responses/Product"
    delete:
      tags:
        - Products
      responses:
        204:
          $ref: "#/components/responses/NoContent"
  /products/{id}/comments:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
      tags:
        - Products
      responses:
        200:
          $ref: "#/components/responses/Comments"
    post:
      tags:
        - Products
      requestBody:
        $ref: "#/components/requestBodies/CommentAdd"
      responses:
        201:
          $ref: "#/components/responses/Comment"
  /products/{id}/comments/{comment}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: comment
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - Products
      responses:
        200:
          $ref: "#/components/responses/Comment"
    patch:
      tags:
        - Products
      requestBody:
        $ref: "#/components/requestBodies/CommentUpdate"
      responses:
        201:
          $ref: "#/components/responses/Comment"
    delete:
      tags:
        - Products
      responses:
        204:
          $ref: "#/components/responses/NoContent"
  /orders:
    get:
      tags:
        - Utilities
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
      responses:
        200:
          $ref: "#/components/responses/Orders"
  /orders/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Utilities
      responses:
        200:
          $ref: "#/components/responses/Order"
  /orders/{id}/invoice:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Utilities
      responses:
        200:
          $ref: "#/components/responses/Invoice"
        404:
          $ref: "#/components/responses/ErrorResult"
  /payments/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - Utilities
      responses:
        200:
          $ref: "#/components/responses/Payment"
  /cart:
    get:
      tags:
        - Utilities
      responses:
        200:
          $ref: "#/components/responses/Cart"
    patch:
      tags:
        - Utilities
      requestBody:
        $ref: "#/components/requestBodies/AddToCart"
      responses:
        200:
          $ref: "#/components/responses/Cart"
    delete:
      tags:
        - Utilities
      requestBody:
        $ref: "#/components/requestBodies/RemoveFromCart"
      responses:
        204:
          $ref: "#/components/responses/NoContent"
components:
  responses:
    Token:
      description: ""
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
              expired_at:
                type: string
                format: date-time
    Users:
      description: ""
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    User:
      description: ""
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    Categories:
      description: ""
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Category'
    Category:
      description: ""
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
    Products:
      description: ""
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Product'
    Product:
      description: ""
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    Comments:
      description: ""
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Comment'
    Comment:
      description: ""
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'
    Orders:
      description: ""
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Order'
    Order:
      description: ""
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
    Cart:
      description: ""
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Cart'
    Payment:
      description: ""
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payment'
    NoContent:
      description: ""
    ErrorResult:
      description: ""
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Invoice:
      description: "Invoice uploaded by seller"
      headers:
        Content-Disposition:
          description: Context display
          schema:
            type: string
            oneOf:
              - default: inline
                description: inline display
              - default: attachment; filename="{id}.pdf"
                description: download as file as [order_id].pdf
      content:
        application/pdf:
          schema:
            type: string
            format: binary
  requestBodies:
    UserCreate:
      description: ""
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
                format: password
              email:
                type: string
                format: email
    UserUpdate:
      description: ""
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
                format: password
              email:
                type: string
                format: email
              permission:
                type: string
                default: USER
                enum:
                  - USER
                  - ADMIN
                  - SUPER_ADMIN
    CategoryCreate:
      description: ""
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 5
                maxLength: 40
              description:
                type: string
                maxLength: 4000
              parent_id:
                type: integer
                format: int64
                nullable: true
    CategoryUpdate:
      description: ""
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 5
                maxLength: 40
              description:
                type: string
                maxLength: 4000
              parent_id:
                type: integer
                format: int64
                nullable: true
    ProductCreate:
      description: ""
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 5
                maxLength: 40
              description:
                type: string
                maxLength: 4000
              category_id:
                type: integer
                format: int64
              price_per_unit:
                type: number
                format: double
                minimum: 0.01
              units:
                default: 1
                type: integer
                format: int32
                minimum: 1
    ProductUpdate:
      description: ""
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 5
                maxLength: 40
              description:
                type: string
                maxLength: 4000
              category_id:
                type: integer
                format: int64
              price_per_unit:
                type: number
                format: double
                minimum: 0.01
              units:
                default: 1
                type: integer
                format: int32
                minimum: 1
    AddToCart:
      description: ""
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                product_id:
                  type: integer
                  format: int64
                quantity:
                  type: integer
                  format: int32
                  minimum: 1
                  default: 1
    RemoveFromCart:
      description: ""
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              type: integer
              format: int64
    CommentAdd:
      description: ""
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                properties:
                  comment:
                    type: string
              - type: object
                properties:
                  rate:
                    type: integer
                    format: int32
                    minimum: 1
                    maximum: 5
              - type: object
                properties:
                  comment:
                    type: string
                  rate:
                    type: integer
                    format: int32
                    minimum: 1
                    maximum: 5
    CommentUpdate:
      description: ""
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              comment:
                type: string
              rate:
                type: integer
                format: int32
                minimum: 1
                maximum: 5
  parameters:
    Limit:
      in: query
      name: limit
      schema:
        format: int32
        type: integer
        default: 20
        minimum: 5
        maximum: 100
    Page:
      in: query
      name: page
      schema:
        format: int32
        type: integer
        default: 1
        minimum: 1
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        parent:
          $ref: '#/components/schemas/Category'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        username:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          nullable: true
          default: null
        permission:
          type: string
          default: USER
          enum:
            - USER
            - ADMIN
            - SUPER_ADMIN
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        category_id:
          type: integer
          format: int64
        price_per_unit:
          type: number
          format: double
        units:
          type: integer
          format: int32
        seller:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          nullable: true
          default: null
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        rate:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
        author:
          $ref: "#/components/schemas/User"
        comment:
          type: string
          nullable: true
    Order:
      type: object
      properties:
        payment:
          $ref: '#/components/schemas/Payment'
        items:
          type: array
          items:
            type: object
            properties:
              product:
                $ref: '#/components/schemas/Product'
              quantity:
                type: integer
                format: int32
              price_per_unit:
                type: number
                format: double
    Cart:
      type: array
      items:
        type: object
        properties:
          product:
            $ref: '#/components/schemas/Product'
          quantity:
            type: integer
            format: int32
    Payment:
      type: object
      properties:
        method:
          type: string
        price:
          type: number
          format: double
        paid:
          type: number
          format: double
    Error:
      type: object
      properties:
        status:
          type: integer
          format: int32
          minimum: 100
          maximum: 599
          example: 404
        error:
          example: Not Found
          type: string
          nullable: false
        message:
          example: "User is not exist in this id: 144"
          type: string
          nullable: true
